[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling>=1.25",
]

[project]
name = "toml-fmt-common"
version = "1.0.0"
description = "Common logic to the TOML formatter."
readme = "README.md"
license = "MIT"
maintainers = [
  { name = "Bernát Gábor", email = "gaborjbernat@gmail.com" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Internet",
  "Topic :: Software Development :: Libraries",
  "Topic :: System",
]
dependencies = [
  "tomli>=2.0.2; python_version<'3.11'",
]
urls."Bug Tracker" = "https://github.com/tox-dev/toml-fmt/issues"
urls."Changelog" = "https://github.com/tox-dev/toml-fmt/blob/main/py-common/CHANGELOG.md"
urls.Documentation = "https://github.com/tox-dev/toml-fmt/"
urls."Source Code" = "https://github.com/tox-dev/toml-fmt"

[tool.ruff]
line-length = 120
format.preview = true
format.docstring-code-line-length = 100
format.docstring-code-format = true
lint.select = [
  "ALL",
]
lint.ignore = [
  "ANN101", # no type annotation for self
  "ANN401", # allow Any as type annotation
  "COM812", # Conflict with formatter
  "CPY",    # No copyright statements
  "D203",   # `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible
  "D212",   # `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible
  "DOC",    # no good support
  "ISC001", # Conflict with formatter
  "S104",   # Possible binding to all interface
]
lint.per-file-ignores."tests/**/*.py" = [
  "D",       # don't care about documentation in tests
  "FBT",     # don't care about booleans as positional arguments in tests
  "INP001",  # no implicit namespace
  "PLC2701", # private import
  "PLR0913", # any number of arguments in tests
  "PLR0917", # any number of arguments in tests
  "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
  "S101",    # asserts allowed in tests...
  "S603",    # `subprocess` call: check for execution of untrusted input
]
lint.isort = { known-first-party = [
  "toml_fmt_py_common",
], required-imports = [
  "from __future__ import annotations",
] }
lint.preview = true

[tool.codespell]
builtin = "clear,usage,en-GB_to_en-US"
count = true
write-changes = true

[tool.pyproject-fmt]
max_supported_python = "3.13"

[tool.coverage]
html.show_contexts = true
html.skip_covered = false
paths.source = [
  "src",
  ".tox/*/lib/*/site-packages",
  ".tox\\*\\Lib\\site-packages",
  "**/src",
  "**\\src",
]
paths.other = [
  ".",
  "*/toml_fmt_common",
  "*\\toml_fmt_common",
]
report.fail_under = 100
run.parallel = true
run.plugins = [
  "covdefaults",
]

[tool.mypy]
show_error_codes = true
strict = true

[dependency-groups]
dev = [
  { include-group = "test" },
  { include-group = "type" },
]
pkg-meta = [
  "check-wheel-contents>=0.6",
  "twine>=5.1.1",
  "uv>=0.4.17",
]
test = [
  "covdefaults>=2.3",
  "pytest>=8.3.2",
  "pytest-cov>=5",
  "pytest-mock>=3.14",
]
type = [
  "mypy==1.11.2",
  { include-group = "test" },
]
